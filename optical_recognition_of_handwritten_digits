{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPzMm1RpLLzlX58Sv6ejxUU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xZvw9GPS4TF8","executionInfo":{"status":"ok","timestamp":1710170840749,"user_tz":-120,"elapsed":7338,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}},"outputId":"3e306ea8-b1e4-48bc-829f-f4c209faae92"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: ucimlrepo in /usr/local/lib/python3.10/dist-packages (0.0.3)\n"]}],"source":["pip install ucimlrepo"]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","import sklearn"],"metadata":{"id":"xHDmbsa5FM2q","executionInfo":{"status":"ok","timestamp":1710170841843,"user_tz":-120,"elapsed":1097,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["import keras\n","from keras.models import Sequential\n","#from keras.layers import Dense\n","from tensorflow.keras.layers import Dense, Dropout"],"metadata":{"id":"dXXlDs8sFP1g","executionInfo":{"status":"ok","timestamp":1710170845124,"user_tz":-120,"elapsed":3283,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["from ucimlrepo import fetch_ucirepo\n","\n","# fetch dataset\n","optical_recognition_of_handwritten_digits = fetch_ucirepo(id=80)\n","\n","# data (as pandas dataframes)\n","X = optical_recognition_of_handwritten_digits.data.features\n","y = optical_recognition_of_handwritten_digits.data.targets\n","\n","# metadata\n","print(optical_recognition_of_handwritten_digits.metadata)\n","\n","# variable information\n","print(optical_recognition_of_handwritten_digits.variables)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ypiUNcMJ4Uyy","executionInfo":{"status":"ok","timestamp":1710170845746,"user_tz":-120,"elapsed":627,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}},"outputId":"42c746f6-d5cc-4e92-cda5-9bec6c72e528"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["{'uci_id': 80, 'name': 'Optical Recognition of Handwritten Digits', 'repository_url': 'https://archive.ics.uci.edu/dataset/80/optical+recognition+of+handwritten+digits', 'data_url': 'https://archive.ics.uci.edu/static/public/80/data.csv', 'abstract': 'Two versions of this database available; see folder', 'area': 'Computer Science', 'tasks': ['Classification'], 'characteristics': ['Multivariate'], 'num_instances': 5620, 'num_features': 64, 'feature_types': ['Integer'], 'demographics': [], 'target_col': ['class'], 'index_col': None, 'has_missing_values': 'no', 'missing_values_symbol': None, 'year_of_dataset_creation': 1998, 'last_updated': 'Wed Aug 23 2023', 'dataset_doi': '10.24432/C50P49', 'creators': ['E. Alpaydin', 'C. Kaynak'], 'intro_paper': {'title': 'Methods of Combining Multiple Classifiers and Their Applications to Handwritten Digit Recognition', 'authors': 'C. Kaynak', 'published_in': 'MSc Thesis, Institute of Graduate Studies in Science and Engineering, Bogazici University', 'year': 1995, 'url': None, 'doi': None}, 'additional_info': {'summary': 'We used preprocessing programs made available by NIST to extract normalized bitmaps of handwritten digits from a preprinted form. From a total of 43 people, 30 contributed to the training set and different 13 to the test set. 32x32 bitmaps are divided into nonoverlapping blocks of 4x4 and the number of on pixels are counted in each block. This generates an input matrix of 8x8 where each element is an integer in the range 0..16. This reduces dimensionality and gives invariance to small distortions.\\r\\n\\r\\nFor info on NIST preprocessing routines, see M. D. Garris, J. L. Blue, G. T. Candela, D. L. Dimmick, J. Geist, P. J. Grother, S. A. Janet, and C. L. Wilson, NIST Form-Based Handprint Recognition System, NISTIR 5469, 1994.', 'purpose': None, 'funded_by': None, 'instances_represent': None, 'recommended_data_splits': None, 'sensitive_data': None, 'preprocessing_description': None, 'variable_info': 'All input attributes are integers in the range 0..16.\\r\\nThe last attribute is the class code 0..9', 'citation': None}}\n","           name     role         type demographic description units  \\\n","0    Attribute1  Feature      Integer        None        None  None   \n","1    Attribute2  Feature      Integer        None        None  None   \n","2    Attribute3  Feature      Integer        None        None  None   \n","3    Attribute4  Feature      Integer        None        None  None   \n","4    Attribute5  Feature      Integer        None        None  None   \n","..          ...      ...          ...         ...         ...   ...   \n","60  Attribute61  Feature      Integer        None        None  None   \n","61  Attribute62  Feature      Integer        None        None  None   \n","62  Attribute63  Feature      Integer        None        None  None   \n","63  Attribute64  Feature      Integer        None        None  None   \n","64        class   Target  Categorical        None        None  None   \n","\n","   missing_values  \n","0              no  \n","1              no  \n","2              no  \n","3              no  \n","4              no  \n","..            ...  \n","60             no  \n","61             no  \n","62             no  \n","63             no  \n","64             no  \n","\n","[65 rows x 7 columns]\n"]}]},{"cell_type":"code","source":["print(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1_lTeGq04Xyp","executionInfo":{"status":"ok","timestamp":1710170845746,"user_tz":-120,"elapsed":7,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}},"outputId":"f4bef2ce-4743-4a10-be47-241a20e968dc"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["      Attribute1  Attribute2  Attribute3  Attribute4  Attribute5  Attribute6  \\\n","0              0           1           6          15          12           1   \n","1              0           0          10          16           6           0   \n","2              0           0           8          15          16          13   \n","3              0           0           0           3          11          16   \n","4              0           0           5          14           4           0   \n","...          ...         ...         ...         ...         ...         ...   \n","5615           0           0           4          10          13           6   \n","5616           0           0           6          16          13          11   \n","5617           0           0           1          11          15           1   \n","5618           0           0           2          10           7           0   \n","5619           0           0          10          14           8           1   \n","\n","      Attribute7  Attribute8  Attribute9  Attribute10  ...  Attribute55  \\\n","0              0           0           0            7  ...            0   \n","1              0           0           0            7  ...            3   \n","2              0           0           0            1  ...            0   \n","3              0           0           0            0  ...            0   \n","4              0           0           0            0  ...           12   \n","...          ...         ...         ...          ...  ...          ...   \n","5615           0           0           0            1  ...            4   \n","5616           1           0           0            0  ...            1   \n","5617           0           0           0            0  ...            0   \n","5618           0           0           0            0  ...            2   \n","5619           0           0           0            2  ...            8   \n","\n","      Attribute56  Attribute57  Attribute58  Attribute59  Attribute60  \\\n","0               0            0            0            6           14   \n","1               0            0            0           10           16   \n","2               0            0            0            9           14   \n","3               0            0            0            0            1   \n","4               0            0            0            4           12   \n","...           ...          ...          ...          ...          ...   \n","5615            0            0            0            2           14   \n","5616            0            0            0            6           16   \n","5617            0            0            0            2            9   \n","5618            0            0            0            5           12   \n","5619            0            0            1            8           12   \n","\n","      Attribute61  Attribute62  Attribute63  Attribute64  \n","0               7            1            0            0  \n","1              15            3            0            0  \n","2               0            0            0            0  \n","3              15            2            0            0  \n","4              14            7            0            0  \n","...           ...          ...          ...          ...  \n","5615           15            9            0            0  \n","5616           14            6            0            0  \n","5617           13            6            0            0  \n","5618           16           12            0            0  \n","5619           14           12            1            0  \n","\n","[5620 rows x 64 columns]\n"]}]},{"cell_type":"code","source":["print(y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vQ2xxVer5Re6","executionInfo":{"status":"ok","timestamp":1710170845747,"user_tz":-120,"elapsed":6,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}},"outputId":"71a846a0-c4b0-41fd-b19a-ce5a43c0d893"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["      class\n","0         0\n","1         0\n","2         7\n","3         4\n","4         6\n","...     ...\n","5615      9\n","5616      0\n","5617      8\n","5618      9\n","5619      8\n","\n","[5620 rows x 1 columns]\n"]}]},{"cell_type":"code","source":["print(np.shape(X))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UMDWYHwoFAqX","executionInfo":{"status":"ok","timestamp":1710170845747,"user_tz":-120,"elapsed":5,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}},"outputId":"50fcc34a-8078-4a57-83ed-4d983fcc5956"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["(5620, 64)\n"]}]},{"cell_type":"code","source":["# Split data into X_train, X_test, y_train, y_test\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state= 0)\n"],"metadata":{"id":"sfVdr_XYFQ8F","executionInfo":{"status":"ok","timestamp":1710170845747,"user_tz":-120,"elapsed":4,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# Check the dimension of the sets\n","print('X_train:',np.shape(X_train))\n","print('y_train:',np.shape(y_train))\n","print('X_test:',np.shape(X_test))\n","print('y_test:',np.shape(y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KwnPMmKfFT6x","executionInfo":{"status":"ok","timestamp":1710170845747,"user_tz":-120,"elapsed":4,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}},"outputId":"ecaf352e-73d1-42fb-940f-006ae2c1aa5d"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train: (4215, 64)\n","y_train: (4215, 1)\n","X_test: (1405, 64)\n","y_test: (1405, 1)\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)"],"metadata":{"id":"gwfuUxUvEefg","executionInfo":{"status":"ok","timestamp":1710170845747,"user_tz":-120,"elapsed":3,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["y_train = np.array(y_train)\n","y_test = np.array(y_test)\n","\n","# One-hot encode target variables\n","encoder = OneHotEncoder(sparse=False)\n","y_train = encoder.fit_transform(y_train.reshape(-1, 1))\n","y_test = encoder.transform(y_test.reshape(-1, 1))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vQ9d41peHqSE","executionInfo":{"status":"ok","timestamp":1710171006332,"user_tz":-120,"elapsed":293,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}},"outputId":"9ac7d3e9-59b7-41fe-b019-a863a0b3eba1"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# declaring model\n","model = Sequential()"],"metadata":{"id":"fWBJ8ilmFeBw","executionInfo":{"status":"ok","timestamp":1710171014610,"user_tz":-120,"elapsed":271,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["model.add(Dense(128, activation='relu', input_shape=(64,)))\n","model.add(Dropout(0.2))\n","model.add(Dense(64, activation='relu'))\n","model.add(Dropout(0.2))\n","model.add(Dense(10, activation='softmax'))\n"],"metadata":{"id":"ZrfYYsksFjpZ","executionInfo":{"status":"ok","timestamp":1710171016247,"user_tz":-120,"elapsed":264,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bayTZLxmFrhn","executionInfo":{"status":"ok","timestamp":1710171018693,"user_tz":-120,"elapsed":306,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}},"outputId":"87346438-df05-4ead-a96f-5b7db41f3068"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 128)               8320      \n","                                                                 \n"," dropout (Dropout)           (None, 128)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 64)                8256      \n","                                                                 \n"," dropout_1 (Dropout)         (None, 64)                0         \n","                                                                 \n"," dense_2 (Dense)             (None, 10)                650       \n","                                                                 \n","=================================================================\n","Total params: 17226 (67.29 KB)\n","Trainable params: 17226 (67.29 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras.losses import CategoricalCrossentropy\n","\n","\n","# Define the optimizer\n","adam = keras.optimizers.Adam()\n","\n","# Compile the model with SparseCategoricalCrossentropy loss\n","model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"],"metadata":{"id":"YddNfWDOF3WS","executionInfo":{"status":"ok","timestamp":1710171022223,"user_tz":-120,"elapsed":310,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["# training the model\n","model.fit(X_train, y_train, epochs=50)\n","\n","\n","# Test, Loss and accuracy\n","loss_and_metrics = model.evaluate(X_test, y_test)\n","print('Loss = ',loss_and_metrics[0])\n","print('Accuracy = ',loss_and_metrics[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IrdznrvqGAhL","executionInfo":{"status":"ok","timestamp":1710171053842,"user_tz":-120,"elapsed":27877,"user":{"displayName":"Eman Fouda","userId":"05970665389894131203"}},"outputId":"ac4eaa5e-1657-4ec0-ca12-3afc7a2cef28"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","132/132 [==============================] - 3s 4ms/step - loss: 0.9907 - accuracy: 0.7215\n","Epoch 2/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.2563 - accuracy: 0.9250\n","Epoch 3/50\n","132/132 [==============================] - 1s 5ms/step - loss: 0.1610 - accuracy: 0.9556\n","Epoch 4/50\n","132/132 [==============================] - 1s 4ms/step - loss: 0.1369 - accuracy: 0.9606\n","Epoch 5/50\n","132/132 [==============================] - 1s 5ms/step - loss: 0.1076 - accuracy: 0.9665\n","Epoch 6/50\n","132/132 [==============================] - 1s 4ms/step - loss: 0.0888 - accuracy: 0.9744\n","Epoch 7/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0802 - accuracy: 0.9722\n","Epoch 8/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0733 - accuracy: 0.9760\n","Epoch 9/50\n","132/132 [==============================] - 0s 4ms/step - loss: 0.0686 - accuracy: 0.9791\n","Epoch 10/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0508 - accuracy: 0.9839\n","Epoch 11/50\n","132/132 [==============================] - 0s 4ms/step - loss: 0.0465 - accuracy: 0.9843\n","Epoch 12/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0380 - accuracy: 0.9867\n","Epoch 13/50\n","132/132 [==============================] - 0s 4ms/step - loss: 0.0413 - accuracy: 0.9870\n","Epoch 14/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0381 - accuracy: 0.9881\n","Epoch 15/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0367 - accuracy: 0.9886\n","Epoch 16/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0314 - accuracy: 0.9910\n","Epoch 17/50\n","132/132 [==============================] - 0s 4ms/step - loss: 0.0293 - accuracy: 0.9903\n","Epoch 18/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0264 - accuracy: 0.9922\n","Epoch 19/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0243 - accuracy: 0.9926\n","Epoch 20/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0247 - accuracy: 0.9912\n","Epoch 21/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0236 - accuracy: 0.9943\n","Epoch 22/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0243 - accuracy: 0.9905\n","Epoch 23/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0211 - accuracy: 0.9931\n","Epoch 24/50\n","132/132 [==============================] - 0s 4ms/step - loss: 0.0172 - accuracy: 0.9938\n","Epoch 25/50\n","132/132 [==============================] - 1s 4ms/step - loss: 0.0242 - accuracy: 0.9924\n","Epoch 26/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0197 - accuracy: 0.9948\n","Epoch 27/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0163 - accuracy: 0.9943\n","Epoch 28/50\n","132/132 [==============================] - 1s 5ms/step - loss: 0.0178 - accuracy: 0.9934\n","Epoch 29/50\n","132/132 [==============================] - 1s 5ms/step - loss: 0.0113 - accuracy: 0.9967\n","Epoch 30/50\n","132/132 [==============================] - 1s 5ms/step - loss: 0.0146 - accuracy: 0.9950\n","Epoch 31/50\n","132/132 [==============================] - 1s 5ms/step - loss: 0.0114 - accuracy: 0.9962\n","Epoch 32/50\n","132/132 [==============================] - 0s 4ms/step - loss: 0.0164 - accuracy: 0.9945\n","Epoch 33/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0099 - accuracy: 0.9972\n","Epoch 34/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0176 - accuracy: 0.9957\n","Epoch 35/50\n","132/132 [==============================] - 0s 4ms/step - loss: 0.0143 - accuracy: 0.9960\n","Epoch 36/50\n","132/132 [==============================] - 0s 4ms/step - loss: 0.0128 - accuracy: 0.9955\n","Epoch 37/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0100 - accuracy: 0.9964\n","Epoch 38/50\n","132/132 [==============================] - 1s 4ms/step - loss: 0.0122 - accuracy: 0.9955\n","Epoch 39/50\n","132/132 [==============================] - 0s 4ms/step - loss: 0.0097 - accuracy: 0.9974\n","Epoch 40/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0084 - accuracy: 0.9976\n","Epoch 41/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0082 - accuracy: 0.9979\n","Epoch 42/50\n","132/132 [==============================] - 0s 4ms/step - loss: 0.0130 - accuracy: 0.9953\n","Epoch 43/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0079 - accuracy: 0.9979\n","Epoch 44/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0086 - accuracy: 0.9969\n","Epoch 45/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0127 - accuracy: 0.9967\n","Epoch 46/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0106 - accuracy: 0.9967\n","Epoch 47/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0064 - accuracy: 0.9981\n","Epoch 48/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0079 - accuracy: 0.9967\n","Epoch 49/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0077 - accuracy: 0.9967\n","Epoch 50/50\n","132/132 [==============================] - 0s 3ms/step - loss: 0.0104 - accuracy: 0.9967\n","44/44 [==============================] - 0s 3ms/step - loss: 0.0676 - accuracy: 0.9886\n","Loss =  0.06755238026380539\n","Accuracy =  0.9886121153831482\n"]}]}]}